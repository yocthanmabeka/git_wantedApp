import 'package:flutter/material.dart';
import 'package:wanted/api/mock_wanted_service.dart';
import 'package:wanted/models/model.dart';

/// **Provider pour g√©rer les activit√©s en temps r√©el**
class ActivityProvider extends ChangeNotifier {
  final MockWantedService _mockWantedService = MockWantedService();
  List<Activity> _activities = [];
  int _selectedIndex = 0;

  /// ‚úÖ **Liste des onglets pour filtrer les activit√©s**
  final List<String> activityTabs = ["All", "Events", "Linked", "Upcoming"];

  ActivityProvider() {
    fetchActivities(); // R√©cup√©rer les activit√©s au d√©marrage
  }

  List<Activity> get activities => _filteredActivities();
  int get selectedIndex => _selectedIndex;

  /// **üîÑ R√©cup√®re toutes les activit√©s depuis l'API**
  Future<void> fetchActivities() async {
    try {
      WantedData data = await _mockWantedService.getWantedData();
      _activities = data.activities;
      notifyListeners();
    } catch (e) {
      debugPrint("Erreur lors du chargement des activit√©s: $e");
    }
  }

  /// **üîÑ Filtre les activit√©s selon l'onglet s√©lectionn√©**
  List<Activity> _filteredActivities() {
    switch (_selectedIndex) {
      case 1:
        return _activities
            .where((activity) => activity.type == "event_participation")
            .toList();
      case 2:
        return _activities
            .where((activity) => activity.type == "linked_activity")
            .toList();
      case 3:
        return _activities
            .where((activity) => activity.type == "upcoming_activity")
            .toList();
      default:
        return _activities;
    }
  }

  /// **üîÑ Met √† jour l'onglet s√©lectionn√©**
  void updateTabIndex(int index) {
    _selectedIndex = index;
    notifyListeners();
  }

  /// **‚ûï Ajoute une nouvelle activit√© (quand un utilisateur suit quelqu'un, etc.)**
  void addActivity(Activity newActivity) {
    _activities.insert(0, newActivity);
    notifyListeners();
  }

  /// **‚ùå Supprime une activit√© sp√©cifique**
  void removeActivity(Activity activity) {
    _activities.remove(activity);
    notifyListeners();
  }
}
